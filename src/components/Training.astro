---
const programs = [
  {
    title: "Elite Performance",
    description:
      "AI-powered training methodology for peak athletic performance",
    image:
      "https://images.pexels.com/photos/700446/pexels-photo-700446.jpeg?auto=compress&cs=tinysrgb&w=600",
    category: "Premium",
    features: [
      "Advanced AI tracking",
      "Real-time performance analytics",
      "Elite coaching support",
      "Custom nutrition plans",
    ],
    stats: {
      improvement: "45%",
      satisfaction: "98%",
      retention: "92%",
    },
  },
  {
    title: "Strength Master",
    description:
      "Revolutionary strength training program with cutting-edge techniques",
    image:
      "https://images.pexels.com/photos/1480530/pexels-photo-1480530.jpeg?auto=compress&cs=tinysrgb&w=600",
    category: "Advanced",
    features: [
      "Progressive overload AI",
      "Form analysis technology",
      "Recovery optimization",
      "Strength benchmarking",
    ],
    stats: {
      improvement: "52%",
      satisfaction: "96%",
      retention: "89%",
    },
  },
  {
    title: "Endurance Elite",
    description: "Next-generation endurance training for exceptional stamina",
    image:
      "https://images.pexels.com/photos/241456/pexels-photo-241456.jpeg?auto=compress&cs=tinysrgb&w=600",
    category: "Specialty",
    features: [
      "VO2 max optimization",
      "Heart rate zone training",
      "Recovery protocols",
      "Endurance analytics",
    ],
    stats: {
      improvement: "38%",
      satisfaction: "95%",
      retention: "94%",
    },
  },
  {
    title: "Transform Pro",
    description: "Complete body transformation using AI-driven methodologies",
    image:
      "https://images.pexels.com/photos/2092479/pexels-photo-2092479.jpeg?auto=compress&cs=tinysrgb&w=600",
    category: "Premium",
    features: [
      "Body composition AI",
      "Metabolic optimization",
      "Nutrition automation",
      "Progress tracking",
    ],
    stats: {
      improvement: "41%",
      satisfaction: "97%",
      retention: "90%",
    },
  },
];

const achievements = [
  {
    number: "8K+",
    label: "Active Members",
    description: "Transforming lives daily",
  },
  {
    number: "500+",
    label: "Elite Athletes",
    description: "Professional success stories",
  },
  {
    number: "95%",
    label: "Goal Achievement",
    description: "Proven results",
  },
  {
    number: "30%",
    label: "Performance Boost",
    description: "Average improvement",
  },
];
---

<section class="bg-[#0D0116] min-h-screen overflow-hidden relative h-full">
  <div class="absolute inset-0 opacity-30">
    <div
      class="absolute top-0 left-1/4 w-96 h-96 bg-pink-600/20 rounded-full filter blur-[128px] animate-pulse"
    >
    </div>
    <div
      class="absolute bottom-0 right-1/4 w-96 h-96 bg-purple-600/20 rounded-full filter blur-[128px] animate-pulse delay-700"
    >
    </div>
  </div>

  <div class="relative z-10 pt-20">
    <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
      <div class="flex items-center gap-2 mb-8">
        <div class="w-12 h-[2px] bg-gradient-to-r from-pink-500 to-purple-500">
        </div>
        <div class="w-3 h-3 rounded-full bg-pink-500 animate-pulse"></div>
      </div>

      <div class="grid grid-cols-1 lg:grid-cols-2 gap-20">
        <div class="space-y-8">
          <h1 class="text-7xl font-bold tracking-tight">
            <span
              class="bg-clip-text text-transparent bg-gradient-to-r from-pink-500 to-purple-500"
              >NEXT</span
            >
            <br />
            <span class="text-white">EVOLUTION</span>
          </h1>

          <p class="text-gray-400 text-xl font-light leading-relaxed max-w-lg">
            Transform your potential with our revolutionary training systems.
            Experience fitness reimagined for the future.
          </p>

          <div class="flex gap-6">
            <button
              class="px-8 py-4 bg-gradient-to-r from-pink-500 to-purple-500 rounded-full relative group overflow-hidden"
            >
              <div
                class="absolute inset-0 bg-gradient-to-r from-pink-600 to-purple-600 translate-y-full group-hover:translate-y-0 transition-transform duration-300"
              >
              </div>
              <span class="relative z-10 text-white font-medium"
                >Start Your Journey</span
              >
            </button>
            <button
              class="px-8 py-4 border border-pink-500/30 rounded-full text-white font-medium hover:bg-pink-500/10 transition-colors"
            >
              Learn More
            </button>
          </div>
        </div>

        <div class="grid grid-cols-2 gap-6">
          {
            achievements.map((achievement) => (
              <div class="relative bg-black/20 backdrop-blur-xl rounded-2xl p-6 border border-white/5 transition-all duration-300 hover:border-pink-500/20 group">
                <div class="absolute inset-0 bg-gradient-to-br from-pink-500/10 to-purple-500/10 opacity-0 group-hover:opacity-100 transition-opacity duration-500 rounded-2xl" />
                <h3 class="text-4xl font-bold text-white mb-2 bg-clip-text text-transparent bg-gradient-to-r from-pink-500 to-purple-500">
                  {achievement.number}
                </h3>
                <p class="text-gray-400 font-medium">{achievement.label}</p>
                <p class="text-gray-500 text-sm mt-1">
                  {achievement.description}
                </p>
              </div>
            ))
          }
        </div>
      </div>
    </div>

    <div class="mb-20 mt-20 relative">
      <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 mb-12">
        <div class="flex justify-between items-center">
          <h2 class="text-3xl font-bold text-white">Featured Programs</h2>
          <div class="flex gap-4">
            <button
              id="prev"
              class="group p-4 rounded-full border border-white/10 hover:border-pink-500/50 backdrop-blur-xl transition-all duration-300"
            >
              <svg
                class="w-6 h-6 text-white/50 group-hover:text-pink-500 transition-colors"
                fill="none"
                stroke="currentColor"
                viewBox="0 0 24 24"
              >
                <path
                  stroke-linecap="round"
                  stroke-linejoin="round"
                  stroke-width="1.5"
                  d="M15 19l-7-7 7-7"></path>
              </svg>
            </button>
            <button
              id="next"
              class="group p-4 rounded-full border border-white/10 hover:border-pink-500/50 backdrop-blur-xl transition-all duration-300"
            >
              <svg
                class="w-6 h-6 text-white/50 group-hover:text-pink-500 transition-colors"
                fill="none"
                stroke="currentColor"
                viewBox="0 0 24 24"
              >
                <path
                  stroke-linecap="round"
                  stroke-linejoin="round"
                  stroke-width="1.5"
                  d="M9 5l7 7-7 7"></path>
              </svg>
            </button>
          </div>
        </div>
      </div>

      <div class="carousel-container w-full overflow-hidden">
        <div class="carousel flex transition-transform duration-700 ease-out">
          {
            programs.map((program) => (
              <div class="carousel-item min-w-full px-4 opacity-0">
                <div class="max-w-7xl mx-auto">
                  <div class="grid grid-cols-1 lg:grid-cols-2 gap-12">
                    <div class="relative group">
                      <div class="h-[600px] rounded-3xl overflow-hidden">
                        <div class="absolute inset-0 bg-gradient-to-br from-purple-900/20 to-pink-900/20" />
                        <img
                          src={program.image}
                          alt={program.title}
                          class="w-full h-full object-cover"
                        />
                        <div class="absolute inset-0 flex items-center justify-center">
                          <button class="w-20 h-20 rounded-full flex items-center justify-center relative overflow-hidden group-hover:scale-110 transition-transform duration-300">
                            <div class="absolute inset-0 bg-gradient-to-r from-pink-500 to-purple-500 rounded-full opacity-20 group-hover:opacity-30 transition-opacity duration-300" />
                            <svg
                              class="w-10 h-10 text-white relative z-10"
                              fill="none"
                              stroke="currentColor"
                              viewBox="0 0 24 24"
                            >
                              <path
                                stroke-linecap="round"
                                stroke-linejoin="round"
                                stroke-width="1.5"
                                d="M14.752 11.168l-3.197-2.132A1 1 0 0010 9.87v4.263a1 1 0 001.555.832l3.197-2.132a1 1 0 000-1.664z"
                              />
                            </svg>
                          </button>
                        </div>
                      </div>
                    </div>

                    <div class="space-y-8">
                      <div>
                        <div class="inline-block px-4 py-1 rounded-full bg-pink-500/10 border border-pink-500/20 text-pink-300 text-sm mb-4">
                          {program.category}
                        </div>
                        <h3 class="text-4xl font-bold text-white mb-4">
                          {program.title}
                        </h3>
                        <p class="text-gray-400 text-lg font-light leading-relaxed">
                          {program.description}
                        </p>
                      </div>

                      <div class="grid grid-cols-3 gap-6">
                        <div class="p-4 rounded-2xl bg-white/5 backdrop-blur-xl">
                          <div class="text-3xl font-bold text-pink-500 mb-1">
                            {program.stats.improvement}
                          </div>
                          <div class="text-sm text-gray-400">
                            Performance Boost
                          </div>
                        </div>
                        <div class="p-4 rounded-2xl bg-white/5 backdrop-blur-xl">
                          <div class="text-3xl font-bold text-pink-500 mb-1">
                            {program.stats.satisfaction}
                          </div>
                          <div class="text-sm text-gray-400">
                            Satisfaction Rate
                          </div>
                        </div>
                        <div class="p-4 rounded-2xl bg-white/5 backdrop-blur-xl">
                          <div class="text-3xl font-bold text-pink-500 mb-1">
                            {program.stats.retention}
                          </div>
                          <div class="text-sm text-gray-400">
                            Client Retention
                          </div>
                        </div>
                      </div>

                      <ul class="space-y-4">
                        {program.features.map((feature) => (
                          <li class="flex items-center space-x-3">
                            <div class="w-1.5 h-1.5 rounded-full bg-pink-500" />
                            <span class="text-gray-300">{feature}</span>
                          </li>
                        ))}
                      </ul>

                      <div class="flex gap-4">
                        <button class="flex-1 py-4 bg-gradient-to-r from-pink-500 to-purple-500 rounded-xl relative group overflow-hidden">
                          <div class="absolute inset-0 bg-gradient-to-r from-pink-600 to-purple-600 translate-y-full group-hover:translate-y-0 transition-transform duration-300" />
                          <span class="relative z-10 text-white font-medium">
                            Join Program
                          </span>
                        </button>
                        <button class="flex-1 py-4 border border-pink-500/30 rounded-xl text-white font-medium hover:bg-pink-500/10 transition-colors">
                          Learn More
                        </button>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            ))
          }
        </div>
      </div>
    </div>
  </div>
</section>

<style>
  .carousel-container {
    mask-image: linear-gradient(
      to right,
      transparent,
      black 10%,
      black 90%,
      transparent
    );
    -webkit-mask-image: linear-gradient(
      to right,
      transparent,
      black 10%,
      black 90%,
      transparent
    );
  }

  @keyframes slideInRight {
    from {
      opacity: 0;
      transform: translateX(100px) scale(0.95);
    }
    to {
      opacity: 1;
      transform: translateX(0) scale(1);
    }
  }

  .slide-in-right {
    animation: slideInRight 0.8s cubic-bezier(0.16, 1, 0.3, 1) forwards;
  }

  ::-webkit-scrollbar {
    display: none;
  }

  * {
    -ms-overflow-style: none;
    scrollbar-width: none;
  }
</style>

<script>
  const carousel = document.querySelector(".carousel");
  const items = document.querySelectorAll(".carousel-item");
  const prevBtn = document.getElementById("prev");
  const nextBtn = document.getElementById("next");

  let currentIndex = 0;
  const totalSlides = items.length;

  function updateCarousel() {
    const translateX = -currentIndex * 100;
    carousel.style.transform = `translateX(${translateX}%)`;
  }

  function showSlide(index) {
    items.forEach((item, i) => {
      if (i === index) {
        item.classList.add("slide-in-right");
        item.classList.remove("opacity-0");
      } else {
        item.classList.remove("slide-in-right");
        item.classList.add("opacity-0");
      }
    });
  }

  prevBtn?.addEventListener("click", () => {
    if (currentIndex > 0) {
      currentIndex--;
      updateCarousel();
      showSlide(currentIndex);
    }
  });

  nextBtn?.addEventListener("click", () => {
    if (currentIndex < totalSlides - 1) {
      currentIndex++;
      updateCarousel();
      showSlide(currentIndex);
    }
  });

  showSlide(0);

  const observer = new IntersectionObserver(
    (entries) => {
      entries.forEach((entry) => {
        if (entry.isIntersecting) {
          const index = Array.from(items).indexOf(entry.target);
          if (index === currentIndex) {
            entry.target.classList.add("slide-in-right");
            entry.target.classList.remove("opacity-0");
          }
        }
      });
    },
    {
      threshold: 0.1,
      rootMargin: "0px",
    }
  );

  items.forEach((item) => observer.observe(item));

  document.addEventListener("keydown", (e) => {
    if (e.key === "ArrowLeft" && currentIndex > 0) {
      currentIndex--;
      updateCarousel();
      showSlide(currentIndex);
    } else if (e.key === "ArrowRight" && currentIndex < totalSlides - 1) {
      currentIndex++;
      updateCarousel();
      showSlide(currentIndex);
    }
  });

  let touchStartX = 0;
  let touchEndX = 0;

  carousel.addEventListener("touchstart", (e) => {
    touchStartX = e.touches[0].clientX;
  });

  carousel.addEventListener("touchend", (e) => {
    touchEndX = e.changedTouches[0].clientX;
    handleSwipe();
  });

  function handleSwipe() {
    const swipeThreshold = 50;
    const swipeDistance = touchEndX - touchStartX;

    if (Math.abs(swipeDistance) > swipeThreshold) {
      if (swipeDistance > 0 && currentIndex > 0) {
        currentIndex--;
        updateCarousel();
        showSlide(currentIndex);
      } else if (swipeDistance < 0 && currentIndex < totalSlides - 1) {
        currentIndex++;
        updateCarousel();
        showSlide(currentIndex);
      }
    }
  }
</script>
